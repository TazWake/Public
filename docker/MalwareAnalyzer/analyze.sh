#!/bin/bash

# Malware Analysis Script for Incident Response
# Automatically detects file types and runs appropriate analysis tools
# Generates comprehensive reports for forensic investigation

set -e

# Global variables
ANALYSIS_DIR="/analysis"
RESULTS_DIR="$ANALYSIS_DIR/results"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="$RESULTS_DIR/analysis_log_$TIMESTAMP.txt"
SUMMARY_FILE="$RESULTS_DIR/analysis_summary_$TIMESTAMP.txt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create results directory if it doesn't exist
mkdir -p "$RESULTS_DIR"

# Initialize log file
echo "=== Malware Analysis Started: $(date) ===" | tee "$LOG_FILE"
echo "Analysis Directory: $ANALYSIS_DIR" | tee -a "$LOG_FILE"
echo "Results Directory: $RESULTS_DIR" | tee -a "$LOG_FILE"
echo "============================================" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# Logging function
log_message() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling function
handle_error() {
    log_message "${RED}ERROR: $1${NC}"
}

# Success message function
log_success() {
    log_message "${GREEN}SUCCESS: $1${NC}"
}

# Warning message function
log_warning() {
    log_message "${YELLOW}WARNING: $1${NC}"
}

# Info message function
log_info() {
    log_message "${BLUE}INFO: $1${NC}"
}

# Function to generate hashes
generate_hashes() {
    local file="$1"
    local output_file="$2"
    
    log_info "Generating hashes for $(basename "$file")"
    
    {
        echo "=== HASH ANALYSIS ==="
        echo "File: $file"
        echo "Size: $(stat -c%s "$file") bytes"
        echo "Modified: $(stat -c%y "$file")"
        echo ""
        echo "MD5:    $(md5sum "$file" | cut -d' ' -f1)"
        echo "SHA1:   $(sha1sum "$file" | cut -d' ' -f1)"
        echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1)"
        echo "SHA512: $(sha512sum "$file" | cut -d' ' -f1)"
        
        # Fuzzy hash if available
        if command -v ssdeep &> /dev/null; then
            echo "SSDEEP: $(ssdeep -b "$file" | tail -n 1 | cut -d',' -f1)"
        fi
        echo ""
    } >> "$output_file"
}

# Function to analyze Office documents
analyze_office_document() {
    local file="$1"
    local base_name=$(basename "$file")
    local output_file="$RESULTS_DIR/office_analysis_${base_name}_$TIMESTAMP.txt"
    
    log_info "Analyzing Office document: $base_name"
    
    {
        echo "=== OFFICE DOCUMENT ANALYSIS ==="
        echo "File: $file"
        echo "Analysis started: $(date)"
        echo ""
        
        # Basic file information
        echo "=== FILE INFORMATION ==="
        file "$file" 2>/dev/null || echo "Unable to determine file type"
        echo ""
        
        # Generate hashes
        generate_hashes "$file" "$output_file"
        
        # Metadata extraction
        echo "=== METADATA ANALYSIS ==="
        exiftool "$file" 2>/dev/null || echo "Unable to extract metadata"
        echo ""
        
        # OLE analysis with oletools
        echo "=== OLETOOLS ANALYSIS ==="
        echo "--- OLEID ---"
        oleid "$file" 2>/dev/null || echo "OLEID analysis failed"
        echo ""
        
        echo "--- OLEVBA ---"
        olevba "$file" 2>/dev/null || echo "OLEVBA analysis failed"
        echo ""
        
        echo "--- OLEOBJ ---"
        oleobj "$file" 2>/dev/null || echo "OLEOBJ analysis failed"
        echo ""
        
        echo "--- MRAPTOR ---"
        mraptor "$file" 2>/dev/null || echo "MRAPTOR analysis failed"
        echo ""
        
        echo "=== STRINGS ANALYSIS ==="
        strings "$file" 2>/dev/null | head -100 || echo "Unable to extract strings"
        echo ""
        
    } > "$output_file"
    
    log_success "Office document analysis completed: $output_file"
}

# Function to analyze PDF files
analyze_pdf() {
    local file="$1"
    local base_name=$(basename "$file")
    local output_file="$RESULTS_DIR/pdf_analysis_${base_name}_$TIMESTAMP.txt"
    
    log_info "Analyzing PDF file: $base_name"
    
    {
        echo "=== PDF ANALYSIS ==="
        echo "File: $file"
        echo "Analysis started: $(date)"
        echo ""
        
        # Basic file information
        echo "=== FILE INFORMATION ==="
        file "$file" 2>/dev/null || echo "Unable to determine file type"
        echo ""
        
        # Generate hashes
        generate_hashes "$file" "$output_file"
        
        # Metadata extraction
        echo "=== METADATA ANALYSIS ==="
        exiftool "$file" 2>/dev/null || echo "Unable to extract metadata"
        echo ""
        
        # PDF-specific analysis
        echo "=== PDFID ANALYSIS ==="
        python3 -c "
import sys
try:
    from pdfid import pdfid
    print(pdfid.PDFiD('$file'))
except Exception as e:
    print(f'PDFID analysis failed: {e}')
"
        echo ""
        
        echo "=== PDF STRUCTURE ==="
        pdfinfo "$file" 2>/dev/null || echo "Unable to get PDF info"
        echo ""
        
        echo "=== STRINGS ANALYSIS ==="
        strings "$file" 2>/dev/null | head -100 || echo "Unable to extract strings"
        echo ""
        
    } > "$output_file"
    
    log_success "PDF analysis completed: $output_file"
}

# Function to analyze executable files
analyze_executable() {
    local file="$1"
    local base_name=$(basename "$file")
    local output_file="$RESULTS_DIR/executable_analysis_${base_name}_$TIMESTAMP.txt"
    
    log_info "Analyzing executable file: $base_name"
    
    {
        echo "=== EXECUTABLE ANALYSIS ==="
        echo "File: $file"
        echo "Analysis started: $(date)"
        echo ""
        
        # Basic file information
        echo "=== FILE INFORMATION ==="
        file "$file" 2>/dev/null || echo "Unable to determine file type"
        echo ""
        
        # Generate hashes
        generate_hashes "$file" "$output_file"
        
        # Metadata extraction
        echo "=== METADATA ANALYSIS ==="
        exiftool "$file" 2>/dev/null || echo "Unable to extract metadata"
        echo ""
        
        # ELF analysis
        if file "$file" | grep -q ELF; then
            echo "=== ELF ANALYSIS ==="
            readelf -h "$file" 2>/dev/null || echo "Unable to read ELF header"
            echo ""
            
            echo "=== ELF SECTIONS ==="
            readelf -S "$file" 2>/dev/null | head -20 || echo "Unable to read ELF sections"
            echo ""
            
            echo "=== ELF SYMBOLS ==="
            nm "$file" 2>/dev/null | head -50 || echo "No symbols found or unable to read"
            echo ""
        fi
        
        # PE analysis (if pefile is available)
        echo "=== PE ANALYSIS ==="
        python3 -c "
import sys
import pefile
import os

try:
    pe = pefile.PE('$file')
    print('PE File Analysis:')
    print(f'Machine Type: {hex(pe.FILE_HEADER.Machine)}')
    print(f'Number of Sections: {pe.FILE_HEADER.NumberOfSections}')
    print(f'Timestamp: {pe.FILE_HEADER.TimeDateStamp}')
    print(f'Entry Point: {hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint)}')
    print('')
    print('Sections:')
    for section in pe.sections:
        print(f'  {section.Name.decode().rstrip(chr(0))} - Virtual Size: {hex(section.Misc_VirtualSize)}')
except Exception as e:
    print('Not a valid PE file or analysis failed')
" 2>/dev/null
        echo ""
        
        # Strings analysis
        echo "=== STRINGS ANALYSIS ==="
        strings "$file" 2>/dev/null | head -100 || echo "Unable to extract strings"
        echo ""
        
        # Hexdump sample
        echo "=== HEX DUMP (first 512 bytes) ==="
        xxd "$file" 2>/dev/null | head -32 || echo "Unable to generate hex dump"
        echo ""
        
    } > "$output_file"
    
    log_success "Executable analysis completed: $output_file"
}

# Function to analyze general files
analyze_general_file() {
    local file="$1"
    local base_name=$(basename "$file")
    local output_file="$RESULTS_DIR/general_analysis_${base_name}_$TIMESTAMP.txt"
    
    log_info "Analyzing general file: $base_name"
    
    {
        echo "=== GENERAL FILE ANALYSIS ==="
        echo "File: $file"
        echo "Analysis started: $(date)"
        echo ""
        
        # Basic file information
        echo "=== FILE INFORMATION ==="
        file "$file" 2>/dev/null || echo "Unable to determine file type"
        echo ""
        
        # TrID analysis if available
        if command -v trid &> /dev/null; then
            echo "=== TRID FILE TYPE IDENTIFICATION ==="
            trid "$file" 2>/dev/null || echo "TrID analysis failed"
            echo ""
        fi
        
        # Generate hashes
        generate_hashes "$file" "$output_file"
        
        # Metadata extraction
        echo "=== METADATA ANALYSIS ==="
        exiftool "$file" 2>/dev/null || echo "Unable to extract metadata"
        echo ""
        
        # Binwalk analysis
        echo "=== BINWALK ANALYSIS ==="
        binwalk "$file" 2>/dev/null || echo "Binwalk analysis failed"
        echo ""
        
        # Strings analysis
        echo "=== STRINGS ANALYSIS ==="
        strings "$file" 2>/dev/null | head -100 || echo "Unable to extract strings"
        echo ""
        
        # Hexdump sample
        echo "=== HEX DUMP (first 512 bytes) ==="
        xxd "$file" 2>/dev/null | head -32 || echo "Unable to generate hex dump"
        echo ""
        
    } > "$output_file"
    
    log_success "General file analysis completed: $output_file"
}

# Function to run antivirus scan
run_antivirus_scan() {
    local file="$1"
    local base_name=$(basename "$file")
    local output_file="$RESULTS_DIR/antivirus_scan_${base_name}_$TIMESTAMP.txt"
    
    log_info "Running antivirus scan: $base_name"
    
    {
        echo "=== ANTIVIRUS SCAN ==="
        echo "File: $file"
        echo "Scan started: $(date)"
        echo ""
        
        # ClamAV scan
        echo "=== CLAMAV SCAN ==="
        clamscan --verbose "$file" 2>/dev/null || echo "ClamAV scan failed or not available"
        echo ""
        
    } > "$output_file"
    
    log_success "Antivirus scan completed: $output_file"
}

# Function to determine file type and run appropriate analysis
analyze_file() {
    local file="$1"
    
    if [[ ! -f "$file" ]]; then
        handle_error "File not found: $file"
        return 1
    fi
    
    log_info "Starting analysis of: $(basename "$file")"
    
    # Get file type
    local file_type=$(file "$file" | tr '[:upper:]' '[:lower:]')
    local file_ext="${file##*.}"
    file_ext=$(echo "$file_ext" | tr '[:upper:]' '[:lower:]')
    
    # Run antivirus scan for all files
    run_antivirus_scan "$file"
    
    # Analyze based on file type
    if [[ "$file_type" == *"microsoft office"* ]] || \
       [[ "$file_type" == *"microsoft excel"* ]] || \
       [[ "$file_type" == *"microsoft word"* ]] || \
       [[ "$file_type" == *"composite document file"* ]] || \
       [[ "$file_ext" == "doc" ]] || [[ "$file_ext" == "docx" ]] || \
       [[ "$file_ext" == "xls" ]] || [[ "$file_ext" == "xlsx" ]] || \
       [[ "$file_ext" == "ppt" ]] || [[ "$file_ext" == "pptx" ]] || \
       [[ "$file_ext" == "rtf" ]]; then
        analyze_office_document "$file"
        
    elif [[ "$file_type" == *"pdf"* ]] || [[ "$file_ext" == "pdf" ]]; then
        analyze_pdf "$file"
        
    elif [[ "$file_type" == *"executable"* ]] || \
         [[ "$file_type" == *"elf"* ]] || \
         [[ "$file_type" == *"pe32"* ]] || \
         [[ "$file_ext" == "exe" ]] || [[ "$file_ext" == "dll" ]] || \
         [[ "$file_ext" == "so" ]] || [[ "$file_ext" == "bin" ]]; then
        analyze_executable "$file"
        
    else
        analyze_general_file "$file"
    fi
    
    echo "$(basename "$file")" >> "$RESULTS_DIR/analyzed_files_$TIMESTAMP.txt"
}

# Function to generate summary report
generate_summary() {
    log_info "Generating analysis summary"
    
    {
        echo "=== MALWARE ANALYSIS SUMMARY ==="
        echo "Analysis completed: $(date)"
        echo "Total files analyzed: $(wc -l < "$RESULTS_DIR/analyzed_files_$TIMESTAMP.txt" 2>/dev/null || echo "0")"
        echo ""
        
        echo "=== FILES ANALYZED ==="
        if [[ -f "$RESULTS_DIR/analyzed_files_$TIMESTAMP.txt" ]]; then
            cat "$RESULTS_DIR/analyzed_files_$TIMESTAMP.txt"
        else
            echo "No files were analyzed"
        fi
        echo ""
        
        echo "=== OUTPUT FILES GENERATED ==="
        ls -la "$RESULTS_DIR"/*"$TIMESTAMP"* 2>/dev/null | awk '{print $9, $5, $6, $7, $8}' || echo "No output files generated"
        echo ""
        
        echo "=== ANALYSIS LOG ==="
        echo "See: $LOG_FILE"
        echo ""
        
    } > "$SUMMARY_FILE"
    
    log_success "Summary report generated: $SUMMARY_FILE"
}

# Main function
main() {
    log_info "Starting malware analysis tool"
    
    # Check if running in Docker
    if [[ ! -f /.dockerenv ]]; then
        log_warning "Not running in Docker container - some tools may not be available"
    fi
    
    # Find all files in analysis directory (excluding hidden files and directories)
    file_count=0
    while IFS= read -r -d '' file; do
        if [[ -f "$file" && "$(basename "$file")" != .* ]]; then
            analyze_file "$file"
            ((file_count++))
        fi
    done < <(find "$ANALYSIS_DIR" -maxdepth 1 -type f -print0 2>/dev/null)
    
    if [[ $file_count -eq 0 ]]; then
        log_warning "No files found to analyze in $ANALYSIS_DIR"
    else
        log_success "Analyzed $file_count files"
    fi
    
    # Generate summary
    generate_summary
    
    log_info "Analysis complete. Results saved in: $RESULTS_DIR"
    echo ""
    echo -e "${GREEN}Analysis Summary:${NC}"
    echo "- Log file: $LOG_FILE"
    echo "- Summary: $SUMMARY_FILE"
    echo "- Results directory: $RESULTS_DIR"
    echo ""
    
    # Display summary
    if [[ -f "$SUMMARY_FILE" ]]; then
        cat "$SUMMARY_FILE"
    fi
}

# Run main function
main "$@"